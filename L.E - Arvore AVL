#include <stdio.h>
#include <stdlib.h>

typedef struct no{
  int content;
  struct no *left;
  struct no *right;
}no;

//Inserir Elemento
no *insert(no *root, int value){
  if(root==NULL){
    no *new = (no*) malloc(sizeof(no));
    new->content = value;
    new->left = NULL;
    new->right = NULL;
    new->height = 0;
    return new;
  }else{
    if(value < root->content){
      root->left = insert(root->left, value);
    }
    if(value > root->content){
      root->right = insert(root->right, value);
    }
  }

  root = balance(root);
  return root;
}

//Encontrar Elemento
int find(no *root, int value){
  if(root){
    if(root->content == value){
      return "This number exists";
    }else{
      if (value < root->content){
        return find(root->left, value);
      }else{
        return find(root->right, value);
      }
    }
  }
  return "This number does not exist";
}

//Encontrar No
no *findNo(no *root, int value){
  if(root){
    if(root->content == value){
      return root;
    }else{
      if (value < root->content){
        return findNo(root->left, value);
      }else{
        return findNo(root->right, value);
      }
    }
  }
  return NULL;
}

//Tamanho da Arvore
int size(no *root){
  if(root == NULL){
    return 0;
  }
  return 1 + size(root->left) + size(root->right);
}

//Altura 
int height(no *root){ //500
  int heightAux;
  if (root == NULL){
    return -1;
  }else{
    int lef = height(root->left);//-1
    int rig = height(root->right);//-1
    if(lef > rig){
      return lef + 1;
    }
    return rig + 1;
  }
}

//Fator de Balanceamento
int balancingFactor(no *node){
  if(node){
    return (height(node->right) - height(node->left));
  }
  return 0;
}

//Qual o maior, esquerdo ou direito
int bigger(int a, int b){
  return (a>b)? a:b;
}

//Rotação Esquerda
no *leftRotation(no *r){
  no *y, *f;
  y = r->left;
  f = y->right;

  y->right = r;
  r->left = f;
  return y;
}

//Rotação a Direita
no *rightRotation(no *r){
  no *y, *f;
  y = r->right;
  f = y->left;

  y->left = r;
  r->right = f;
  return y;
}

//Rotação Dupla - DireitaEsquerda
no *rightLeftRotation(no *r){
  r->right = rightRotation(r->right);
  return leftRotation(r);
}

//Rotação Dupla - EsquerdaDireita
no *leftRightRotation(no *r){
  r->left = leftRotation(r->left);
  return rightRotation(r);
}

//Balancear a arvore
no *balance(no *root){
  int bf = balancingFactor(root);
  if(bf < -1 && balancingFactor(root->right) <= 0){
    root = rightRotation(root);
  }
  else if(bf > 1 && balancingFactor(root->left) >= 0){
    root = leftRotation(root);
  }
  else if(bf > 1 && balancingFactor(root->left) < 0){
    root = rightLeftRotation(root);
  }
  else if(bf < 1 && balancingFactor(root->right) > 0){
    root = leftRightRotation(root);
  }

  return root;
}

//Imprimir Arvore InOrder
void printTreeInOrder(no *root){
  if(root != NULL){
    printTreeInOrder(root->left);
    printf("%d ", root->content);
    printTreeInOrder(root->right);
  }
}

//Imprimir Arvore PreOrder
void printTreePreOrder(no *root){
  if(root != NULL){
    printf("%d ", root->content);
    printTreePreOrder(root->left);
    printTreePreOrder(root->right);
  }
}

//Imprimir Arvore InOrder
void printTreePosOrder(no *root){
  if(root != NULL){
    printTreePosOrder(root->left);
    printTreePosOrder(root->right);
    printf("%d ", root->content);
  }
}

//Remover Elemento
no *remove(no *root){
  if(root == NULL){
    printf("Element not found");
    return NULL;
  }else{
    if(root->value == value){
      if(root->left == NULL && root->right == NULL){
        free(root):
        printf("Leaf element removed: %d !\n", value);
        return NULL;
      }else{
        if(root->left != NULL && root->right != NULL){
          no *aux = root->left;
          while(aux->right){
            aux = aux->right
          }
        }
      }
    }
  }
}

//Função principal
int main(void){
  int option, value;

  no *root = NULL;

  do{
    printf("\n0 - Quit \n1 - Insert \n2 - Print(IN ORDER, PRE ORDER, PÓS ORDER)\n3 - Find\n4 - Height(Tree)\n5 - Height(Secondary tree)\n6 - Balancing factor(Tree)\n7 - Balancing factor(Secondary tree)\n8 - Remove element");
    scanf("%d", &option);

    switch(option){
      case 0:
        printf("\n\tLeaving...\n");
        break;
      case 1:
        printf("Enter a number: ");
        scanf("%d", &value);
        root = insert(root, value);
        break;
      case 2:
        printf("\tBinary tree printing IN ORDER: ");
        printTreeInOrder(root);
        printf("\n");
        printf("\tBinary tree printing PRE ORDER: ");
        printTreePreOrder(root);
        printf("\n");
        printf("\tBinary tree printing PÓS ORDER: ");
        printTreePosOrder(root);
        printf("\n");
        printf("\tSize: %d\n", size(root));
        break;
      case 3:
        printf("Enter the value you want to search: ");
        scanf("%d", &value);
        printf("\tSearch result: %s\n", find(root, value));
        break;
      case 4:
        printf("\n\tTreeHeight: %d\n", height(root));
        break;
      case 5:
        printf("What number do you want to see the height? ");
        scanf("%d", &value);
        no *aux = findNo(root, value);
        printf("\n\tNoheight: %d\n", height(aux));
        break;
      case 6:
        printf("\n\tBalancing factor: %d\n", balancingFactor(root));
        break;
      case 7:
        printf("What number do you want to see the balancing factor? ");
        scanf("%d", &value);
        no *node = findNo(root, value);
        printf("\n\tBalancing factor: %d\n", balancingFactor(node));
        break;
      case 8:
        printf("What number do you want to remove? ");
        scanf("%d", &value);
        no *node = findNo(root, value);
        remove(node, value);
        break;
      default:
        printf("\nInvalid option...\n");
    }
  }while(option!=0);

  return 0;
}
