#include <stdio.h>
#include <stdlib.h>
#define MAX_NODES 200005
#define MAX_EDGES 200005

typedef struct {
    int u, v, c;
} Edge;

int parent[MAX_NODES];
int size[MAX_NODES];

int find(int x) {
    if (x != parent[x])
        parent[x] = find(parent[x]);
    return parent[x];
}

void unite(int x, int y) {
    x = find(x);
    y = find(y);
    if (x != y) {
        if (size[x] < size[y]) {
            int temp = x;
            x = y;
            y = temp;
        }
        parent[y] = x;
        size[x] += size[y];
    }
}

int cmp(const void *a, const void *b) {
    return ((Edge*)a)->c - ((Edge*)b)->c;
}

int main() {
    int N, M, K;
    scanf("%d %d %d", &N, &M, &K);

    Edge edges[MAX_EDGES];
    for (int i = 0; i < M; ++i) {
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].c);
    }

    qsort(edges, M, sizeof(Edge), cmp);

    for (int i = 1; i <= N; ++i) {
        parent[i] = i;
        size[i] = 1;
    }

    int ans = -1;
    for (int i = 0; i < M; ++i) {
        unite(edges[i].u, edges[i].v);
        if (size[find(1)] >= K) {
            ans = edges[i].c;
            break;
        }
    }

    printf("%d\n", ans);
    return 0;
}
