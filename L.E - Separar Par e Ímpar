#include <stdio.h>
#include <stdlib.h>

typedef struct nodePar{
  int n;
  struct node *next;
}nodePar;

typedef struct nodeImp{
  int n;
  struct nodeImp *next;
}nodeImp;

void vazia(nodePar *p){
  if(p == NULL){
    printf("Pilha vazia");
  }
}

void pushPar(nodePar **head, int n){
  nodePar *new = (nodePar*) malloc(sizeof(nodePar));

  new->n = n;
  new->next = *head;
  *head = new;
}

void pushImp(nodeImp **head, int n){
  nodeImp *new = (nodeImp*) malloc(sizeof(nodeImp));

  new->n = n;
  new->next = *head;
  *head = new;
}

void popPar(nodePar **head){
  if (*head == NULL){
    printf("Pilha par vazia. Não é possível remover.\n");
  }else{
    nodePar *aux = *head;

    *head = aux->next;
    free(aux);
  }
}

void popImp(nodeImp **head){
  if (*head == NULL){
    printf("Pilha imp vazia. Não é possivel remover");
  }else{
    nodeImp *aux = *head;

    *head = aux->next;
    free(aux);
  }
  
}

void printPar(nodePar *head){
  while(head!=NULL){
    printf("%d ", head->n);
    head = head->next;
  }
}

void printImp(nodeImp *head){
  while(head!=NULL){
    printf("%d ", head->n);
    head = head->next;
  }
}

int main(){
  nodePar *headPar = NULL;
  nodeImp *headImp = NULL;
  
  while(1){
    int num;
    printf("Digite um número: ");
    scanf("%d ", &num);
    if (num != 0){
      if (num%2 == 0){
        pushPar(&headPar, num);
      }else{
        pushImp(&headImp, num);
      }
    }else{
      break;
    }
  }
  printf("Lista dos pares: ");
  printPar(headPar);
  printf("\n");
  printf("Lista dos impares: ");
  printImp(headImp);

  //Liberar memória
  while(headPar!=NULL && headImp!=NULL){
    popPar(&headPar);
    popImp(&headImp);
  }

  return 0;
}
