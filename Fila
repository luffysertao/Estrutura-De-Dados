#include <stdio.h>
#include <stdlib.h>

typedef struct NO{
  int dado;
  struct NO *prox;
} NO;

typedef struct FILA{
  NO *ini;
  NO *fim;
}FILA;

//Inicializar fila como vazia
void inicializaFila(FILA *f){
  f->ini = NULL;
  f->fim = NULL;
}

//Enfileirar Fila
void enfileira(int dado, FILA *f){
  NO *ptr = (NO*) malloc(sizeof(NO));
  if (ptr == NULL){
    printf("Erro alocação. \n");
    return;
  } else {
    ptr->dado = dado;
    ptr->prox = NULL;
    if(f->ini == NULL){
      f->ini = ptr;
    }else{
      f->fim->prox = ptr;
    }
    f->fim = ptr;
  }
}

//Desenfileirar Fila
int desenfileira(FILA *f){
  NO *ptr = f->ini;
  int dado;
  if(ptr != NULL){
    f->ini = ptr->prox;
    ptr->prox = NULL;
    dado = ptr->dado;
    free(ptr);
    if (f->ini == NULL){
      f->fim = NULL;
    }
    return dado;
  }else{
    printf("Fila vazia.\n");
    return;
  }
}

//Imprimir Fila
void imprimirFila(FILA *f){
  NO *ptr = f->ini;
  if(ptr != NULL){
    while(ptr != NULL){
      printf("%d ", ptr->dado);
      ptr = ptr->prox;
    }
    printf("\n");
  }else{
    printf("Fila vazia.\n");
    return;
  }
}

int main(){
  FILA *f1 = (FILA*) malloc(sizeof(FILA));
  if(f1 == NULL){
    printf("Erro de alocação.\n");
    exit(-1);
  }else{
    inicializaFila(f1);
    
    enfileira(10, f1);
    enfileira(20, f1);
    enfileira(30, f1);

    imprimirFila(f1);

    printf("Tentando desenfileirar - removido: %d\n", desenfileira(f1));
      imprimirFila(f1);
    printf("Tentando desenfileirar - removido: %d\n", desenfileira(f1));
      imprimirFila(f1);
    printf("Tentando desenfileirar - removido: %d\n", desenfileira(f1));
      imprimirFila(f1);
    
  }
}
